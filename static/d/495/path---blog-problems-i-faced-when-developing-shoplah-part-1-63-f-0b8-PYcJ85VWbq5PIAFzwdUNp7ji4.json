{"data":{"site":{"siteMetadata":{"title":"Jenssen Lee","author":"Jenssen Lee"}},"markdownRemark":{"id":"1b9c9777-77b3-5f8c-9f69-4b8973ed1a87","excerpt":"ShopLah is a shopping cart site  hosted on heroku  which was built using React, React Router, Redux, Redux-persist and Mongoose (not an exhaustive list).  To…","html":"<p>ShopLah is a shopping cart site <a href=\"https://jenlky-shopping-cart.herokuapp.com/\">hosted on heroku</a> which was built using React, React Router, Redux, Redux-persist and Mongoose (not an exhaustive list). </p>\n<p>To find out all the libraries that I used and the reasons behind my decision,\ncheck out this <a href=\"/reasons-for-choosing-shoplah-libraries/\">post</a>.</p>\n<h3>Cart controller logic</h3>\n<blockquote>\n<p>Redux action creators flow chart:</p>\n<p>AddToCart (product doesn’t exist or qty === 0) -> cart controller -> UpdateStore -> CalculatePrice</p>\n<p>RemoveFromCart (product exists or qty >= 1) -> cart controller -> UpdateStore -> CalculatePrice</p>\n<p>UpdateCart (product already exists or qty >= 1) -> cart controller -> UpdateStore -> CalculatePrice</p>\n</blockquote>\n<p>RemoveFromCart splice product from array, while UpdateCart changes the quantity of product.</p>\n<p>My initial thought was that the cart logic should not be duplicated in both cart controller and productsReducer, since I am doing the same thing at two different places - one at database, and one at Redux store. What I did was use the returned response from cart controller to modify my Redux store. However, there is a noticeable ~1000ms delay every time I add, remove or update product’s quantity. </p>\n<p>The reason was because http requests took time and the UX changes were not immediate. I re-wrote it so my action creators would dispatch actions first, before making http requests.</p>\n<h3>React-router doesn’t work after connecting to Redux</h3>\n<p>This is a known issue in react-redux, you can read more about it <a href=\"https://github.com/reduxjs/react-redux/issues/507\">here</a>\nor <a href=\"https://github.com/reduxjs/react-redux/blob/master/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux\">here</a>.\n<em>NavLink</em> didn’t work because <code class=\"language-text\">react-redux</code> connect method implements <em>shouldComponentUpdate</em> which will cause component not to render when props didn’t change. And this is conflicting with <code class=\"language-text\">react-router 4</code>. </p>\n<p>It seems they are going to <a href=\"https://github.com/reactjs/react-redux/pull/625\">remove shouldComponentUpdate</a> in <code class=\"language-text\">react-redux version 5.1</code>.\nThere are at least 3 ways to get it working:</p>\n<ol>\n<li>\n<p>Currently, as a workaround, I pass a prop coming from <code class=\"language-text\">Router</code> like <code class=\"language-text\">this.props.match.params</code> to connected child component even though I don’t use it in inside. But it will make rerendering the component each time when routes change.</p>\n</li>\n<li>\n<p>To avoid it you can pass <em>{pure: false} to connect</em> as described in <a href=\"https://github.com/reduxjs/react-redux/blob/master/docs/troubleshooting.md#my-views-arent-updating-when-something-changes-outside-of-redux\">react-redux troubleshooting section</a>. I tried this but it’s too laggy.</p>\n</li>\n<li>\n<p>Another way is to use withRouter Higher OrderHOC or pass location prop as described in <a href=\"https://reacttraining.com/react-router/web/guides/dealing-with-update-blocking\">Dealing with Update Blocking</a>. Eventually I opted for this method since it’s the simplest.\nHowever, that didn’t work too until I added <code class=\"language-text\">&lt;Router history={history}&gt; to App.js before Switch</code> and it works!</p>\n</li>\n</ol>\n<h3>React spinner</h3>\n<p>React spinner only works when the user is not logged in, and he/she tries to access restricted routes like <code class=\"language-text\">/cart</code> or <code class=\"language-text\">/user/profile</code>. </p>\n<p>The loading page did not show the react spinner which was weird because <code class=\"language-text\">if (this.state.loading) return null</code> works. But I guess <code class=\"language-text\">React</code> updated the state too fast so it didn’t work. </p>\n<p>Adding a setTimeout to <code class=\"language-text\">this.setState({ loading: false })</code> enabled React spinner to run on all routes!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// delay setState of loading so there&#39;s time for spinner to run \nconstructor(props) {\n    super(props);\n    this.state = { loading: true };\n}\n\ncomponentDidMount() {\n    setTimeout(() =&gt; {\n        this.setState({ loading: false })\n    }, 100); // the number of milliseconds affect when setState kicks in\n}</code></pre></div>\n<h3>Redux-persist</h3>\n<p>I used this library because my app loses all its store data on refresh. Redux store does not persist data upon refresh. </p>\n<p>For example, if an user logs in successfully and navigates to another page - he’d lose all his shopping cart items and all his login details from <code class=\"language-text\">Redux store</code>. </p>\n<p>What <code class=\"language-text\">redux-persist</code> does is it prevents the user from losing all these data when he refreshes the page. It saves <code class=\"language-text\">Redux store</code> data to localStorage, and rehydrates <code class=\"language-text\">Redux store</code> when the user refreshes. </p>\n<p>For example, there was <a href=\"https://stackoverflow.com/questions/55412223/react-redux-typeerror-invalid-attempt-to-spread-non-iterable-instance\">a bug</a> where I erroneously returned <code class=\"language-text\">productsReducer: {showPopup: true}</code> without the other values. My persist/REHYDRATE kept rehydrating my productsReducer with that one key.</p>\n<p>Thus when productsReducer ran <code class=\"language-text\">let updatedId = [...state.id]</code> there was an error, because there was no id key in the object.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">const initialState = {\n  products: [],\n  id: [],\n  qty: [],\n  numOfItems: 0,\n  totalPrice: 0,\n  status: &#39;&#39;,\n  showPopup: false\n};\n\nconst productsReducer = (state = initialState, action) =&gt; {\n  let updatedId = [...state.id]; // there was an error on this line\n  let updatedQty = [...state.qty];\n    ....\n}</code></pre></div>\n<p>But the problem is when the user isn’t logged in, the products he added to cart shouldn’t persist. He should not be able to see the added shopping cart items.</p>\n<p>To solve this I tried to <code class=\"language-text\">blacklist: [&#39;productsReducer&#39;]</code>, however the problem is blacklist can’t tell when the user isLoggedIn or not. I want to conditionally persist some information, so my options were:</p>\n<ul>\n<li>\n<p>pause before persist and rehydrate action. But I couldn’t get <code class=\"language-text\">pauseStore: () =&gt; dispatch({ type: PAUSE })</code> to work…</p>\n</li>\n<li>\n<p>remove all products from productsReducer if user is not logged in.\nAlthough this means that an extra action has to be dispatched for non-logged in users, I chose this method because it was the most straightforward one that worked.</p>\n</li>\n<li>\n<p>create a permanent and a temporary reducer - blacklist the temporary one. Too complicated.</p>\n</li>\n</ul>\n<h3>I used Auslogics Disk Defrag defrag and optimise</h3>\n<p>On hindsight, I shouldn’t do that because it messed with my environment variables path and node_modules. I knew my node_modules were faulty because it showed the error -\n<strong>‘nodemon’ is not recognized as an internal or external command, operable program or batch file.</strong></p>\n<p>To fix the former, type the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm config get prefix\nC:\\Users\\Jen\\AppData\\Roaming\\npm // that&#39;s the path on my pc</code></pre></div>\n<p>Go to My Computer (for Windows 7) or This PC (for Windows 10), right click -> properties -> advanced system settings. </p>\n<p>Under Advanced tab, click on Environment Variables and under user variables for <em>user</em> - click edit path variable and check if the path above is inside. If it is not, add it in and restart your computer.</p>\n<p>To fix the latter, I had to remove and re-install all the packages…</p>","frontmatter":{"title":"Problems I faced when developing ShopLah (Part 1)","date":"2 April 2019"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/problems-i-faced-when-developing-shoplah-part-1/"}}